package com.chengtao.base;

import com.chengtao.impl.BinomialIterator;

/**
 * 二项式分布概率类<br/>
 * 只针对概率为1/2，且成功次数为总次数的一半
 * 
 * @author ChengTao
 *
 */
public class Binomial implements BinomialIterator {
	private int upFontPos = 1;
	private int upBackPos = 1;
	private int belowFontPos = 1;
	private int belowBackPos = 1;
	private float testResult = 1;
	private float realResult = 1;
	private boolean useFont = false;

	public Binomial(int successNum) {
		upFontPos = successNum + 1;
		upBackPos = 2 * successNum;
		belowBackPos = successNum;
	}

	@Override
	public boolean hasNext() {
		return upFontPos <= upBackPos;
	}

	@Override
	public float next() {
		float result = 1;
		if (useFont) {
			if (upFontPos > 0) {
				testResult *= (float) upFontPos / (float) (belowFontPos * 4);
				if (testResult > Double.MAX_VALUE) {
					useFont = false;

					realResult *= (float) upBackPos / (float) (belowBackPos * 4);
					testResult = realResult;

					result = (float) upBackPos / (float) (belowBackPos * 4);
					upBackPos--;
					belowBackPos--;
				} else {
					realResult = testResult;

					result = (float) upFontPos / (float) (belowFontPos * 4);
					upFontPos++;
					belowFontPos++;
				}
			}
		} else {
			if (upBackPos > 0) {
				testResult *= (float) upBackPos / (float) (belowBackPos * 4);
				if (testResult < Double.MIN_VALUE) {
					useFont = true;

					realResult *= (float) upFontPos / (float) (belowFontPos * 4);
					testResult = realResult;

					result = (float) upFontPos / (float) (belowFontPos * 4);

					upFontPos++;
					belowFontPos++;
				} else {
					realResult = testResult;

					result = (float) upBackPos / (float) (belowBackPos * 4);
					upBackPos--;
					belowBackPos--;
				}
			}
		}
		return result;
	}
}
