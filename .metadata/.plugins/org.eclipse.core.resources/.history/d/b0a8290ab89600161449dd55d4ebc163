package com.chengtao.entity;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * 多项式类
 * 
 * @author ChengTao
 *
 */
public class Polynomial {
	/**
	 * 多项式变量
	 */
	private char arg;
	/**
	 * 复数数组，用于记录多项式每一项
	 */
	private Complex[] complexs;
	/**
	 * 用于显示参数不同的多项式
	 */
	private ArrayList<Polynomial> differPolynomial;
	/**
	 * 当多项式变量不一样时，则新的多项式为 0
	 */
	private final static char DEFAULT_DIFFER_POLYNOMIAL_ARG = '0';
	/**
	 * 默认的当多项式变量不相等时的复数数组
	 */
	private final static Complex[] DEFAULT_NULL_COMPLEX = {};
	/**
	 * 当不同变量的多项式进行计算时，用于标志该多项式是否进行计算过
	 */
	private boolean isModified = false;

	/**
	 * 运算法则枚举
	 * 
	 * @author ChengTao
	 *
	 */
	private enum CalculateType {
		ADD, SUB, MULTI, dDIV
	}

	/**
	 * 
	 * @param arg
	 *            变量
	 * @param complexs
	 *            多个复数
	 */
	public Polynomial(char arg, Complex... complexs) {
		this.arg = arg;
		this.complexs = complexs;
	}

	@Override
	public String toString() {
		String polynomialStr = "";
		for (int i = 0; i < complexs.length; i++) {
			if (i != 0) {
				polynomialStr += " + ";
			}
			if (!complexs[i].toString().equals("")) {
				polynomialStr += "( " + complexs[i].toString() + " )"
						+ (i > 0 ? (this.arg + (i > 1 ? "^" + i : "")) : "");
			}
		}
		return polynomialStr;
	}

	/**
	 * 拷贝方法
	 */
	@Override
	public Polynomial clone() {
		return new Polynomial(this.arg, this.complexs);
	}

	/**
	 * 多项式加法
	 * 
	 * @param p
	 */
	public Polynomial add(Polynomial p) {
		return calculatePolymail(p, CalculateType.ADD);
	}

	/**
	 * 多项式减法
	 * 
	 * @param p
	 */
	public Polynomial sub(Polynomial p) {
		return calculatePolymail(p, CalculateType.SUB);
	}

	/**
	 * 
	 * @param p
	 *            多项式
	 * @param type
	 *            运算方法
	 * @return 新的多项式
	 */
	private Polynomial calculatePolymail(Polynomial p, CalculateType calculateType) {
		Polynomial newP = null;
		// 判断变量是否相同
		if (this.arg != p.arg) {// 为不同类型的多项式
			newP = calculatePolynomialWithDifferArg(p, calculateType);
		} else {// 为相同类型的多项式
			newP = calculatePolynomialWithSameArg(p, calculateType);
		}
		return newP;
	}

	/**
	 * 计算具有不同变量的多项式
	 * 
	 * @param p
	 * @param calculateType
	 * @return
	 */
	private Polynomial calculatePolynomialWithDifferArg(Polynomial p, CalculateType calculateType) {
		Polynomial newP = new Polynomial(DEFAULT_DIFFER_POLYNOMIAL_ARG, DEFAULT_NULL_COMPLEX);
		newP.differPolynomial = new ArrayList<>();
		// 判断当前变量是否为默认的DEFAULT_DIFFER_POLYNOMIAL_ARG
		if (this.arg == DEFAULT_DIFFER_POLYNOMIAL_ARG) {// 当前多项式为参数不同的多项式
			// 判断形参的变量是否为默认的DEFAULT_DIFFER_POLYNOMIAL_ARG
			if (p.arg == DEFAULT_DIFFER_POLYNOMIAL_ARG) {// 形参为参数不同的多项式
				int oldPolynomialSize = this.differPolynomial.size();
				int newPolynomialSize = p.differPolynomial.size();
				for (int i = 0; i < oldPolynomialSize; i++) {// 遍历当前不同的多项式
					for (int j = 0; j < newPolynomialSize; j++) {// 遍历形参的不同多项式
						if (p.differPolynomial.get(j).arg == this.differPolynomial.get(i).arg) {
							Polynomial polynomial = this.differPolynomial.get(i)
									.calculatePolynomialWithSameArg(p.differPolynomial.get(j), calculateType);
							newP.differPolynomial.add(polynomial);
							//进行标志
							p.differPolynomial.get(j).isModified = true;
							this.differPolynomial.get(i).isModified = true;
							//跳出循环
							break;
						}
					}
				}
				//添加剩余
				addRemain(newP, this);
				addRemain(newP, p);
			} else {// 形参为参数相同的多项式
				int i = 0;
				for ( ; i < this.differPolynomial.size(); i++) {
					if (p.arg == this.differPolynomial.get(i).arg) {
						Polynomial polynomial = this.differPolynomial.get(i).calculatePolynomialWithSameArg(p, calculateType);
						newP.add(polynomial);
						this.differPolynomial.get(i).isModified = true;
						break;
					}
				}
				//添加剩余
				addRemain(newP, this);
			}
		} else {// 当前多项式为相同参数的多项式
			// 形参必定为参数不同的多项式
			int i = 0;
			for ( ; i < p.differPolynomial.size(); i++) {
				if (this.arg == p.differPolynomial.get(i).arg) {
					Polynomial polynomial = p.differPolynomial.get(i).calculatePolynomialWithSameArg(this, calculateType);
					newP.add(polynomial);
					p.differPolynomial.get(i).isModified = true;
					break;
				}
			}
			//添加剩余
			addRemain(newP,p);
		}
		return newP;
	}
	
	/**
	 * 添加剩余
	 * @param newP 新的多项式
	 * @param p 多项式(具有多项式集合)
	 */
	private void addRemain(Polynomial newP,Polynomial p) {
		for (Polynomial polynomial : p.differPolynomial) {
			if (!polynomial.isModified) {
				newP.add(polynomial);
			}
		}
	}
	
	/**
	 * 
	 * @param newP
	 * @param currentP
	 * @param modifyP
	 * @param calculateType
	 */
	private void calculateTwoPolynomialsWithTwoList(Polynomial newP,Polynomial currentP,Polynomial modifyP,CalculateType calculateType) {
		int oldPolynomialSize = currentP.differPolynomial.size();
		int newPolynomialSize = modifyP.differPolynomial.size();
		for (int i = 0; i < oldPolynomialSize; i++) {// 遍历当前不同的多项式
			for (int j = 0; j < newPolynomialSize; j++) {// 遍历形参的不同多项式
				if (modifyP.differPolynomial.get(j).arg == currentP.differPolynomial.get(i).arg) {
					Polynomial polynomial = this.differPolynomial.get(i)
							.calculatePolynomialWithSameArg(modifyP.differPolynomial.get(j), calculateType);
					newP.differPolynomial.add(polynomial);
					//进行标志
					modifyP.differPolynomial.get(j).isModified = true;
					currentP.differPolynomial.get(i).isModified = true;
					//跳出循环
					break;
				}
			}
		}
		//添加剩余
		addRemain(newP, currentP);
		addRemain(newP, modifyP);
	}
	
	/**
	 * 计算具有相同变量的多项式
	 * 
	 * @param p
	 * @param calculateType
	 * @return
	 */
	private Polynomial calculatePolynomialWithSameArg(Polynomial p, CalculateType calculateType) {
		Polynomial newP = new Polynomial(this.arg, DEFAULT_NULL_COMPLEX);
		ArrayList<Complex> cList = new ArrayList<>();
		int oldComplexsLength = this.complexs.length;
		int newComplexsLength = p.complexs.length;
		int i = 0;
		for (; i < oldComplexsLength; i++) {
			if (i == newComplexsLength) {
				break;
			}
			Complex c = null;
			switch (calculateType) {
			case ADD:
				c = this.complexs[i].add(p.complexs[i]);
				break;
			case SUB:
				c = this.complexs[i].sub(p.complexs[i]);
				break;

			default:
				break;
			}

			if (c != null) {
				cList.add(c);
			}
		}
		// 判断是否添加剩余
		if (oldComplexsLength > newComplexsLength) {
			while (i < oldComplexsLength) {
				cList.add(this.complexs[i]);
				i++;
			}
		} else if (oldComplexsLength < newComplexsLength) {
			while (i < newComplexsLength) {
				cList.add(p.complexs[i]);
				i++;
			}
		}
		// 此处不能使用.toArray方法，父类不能进行上转型变成子类
		Complex[] cs = new Complex[cList.size()];
		for (int j = 0; j < cs.length; j++) {
			cs[j] = cList.get(j);
		}
		newP.setComplexs(cs);
		return newP;
	}

	/**
	 * 设置复数数组
	 * 
	 * @param complexs
	 */
	private void setComplexs(Complex[] complexs) {
		this.complexs = complexs;
	}

	/**
	 * 添加新的多项式到集合中
	 * 
	 * @param P
	 *            多项式
	 * @return 新的多项式
	 */
	private Polynomial addDifferPolynomial(Polynomial P) {
		Polynomial newDifferP = new Polynomial(DEFAULT_DIFFER_POLYNOMIAL_ARG, null);
		if (this.differPolynomial == null) {
			this.differPolynomial = new ArrayList<>();
		}
		return newDifferP;
	}

	/**
	 * 显示多项式
	 */
	public void display() {
		if (this.differPolynomial != null) {
			String differStr = "";
			for (int i = 0; i < this.differPolynomial.size(); i++) {
				differStr += this.differPolynomial.get(i).toString();
			}
			System.out.println(differStr);
		} else {
			System.out.println(this.toString());
		}
	}
}
